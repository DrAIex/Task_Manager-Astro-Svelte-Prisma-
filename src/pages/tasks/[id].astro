---
import Layout from '../../layouts/Layout.astro';
import { prisma } from '../../lib/prisma';
import TaskCard from '../../components/TaskCard.svelte';
import PageTransition from '../../components/PageTransition.svelte';
import ShareButton from '../../components/ShareButton.svelte';
import TaskEditModal from '../../components/TaskEditModal.svelte';

const { id } = Astro.params;
let task = null;
let errorMessage = '';

try {
  if (id && !isNaN(parseInt(id))) {
    task = await prisma.task.findUnique({
      where: { id: parseInt(id) },
    });
  }
  
  if (!task) {
    errorMessage = 'Задача не найдена';
    Astro.response.status = 404;
  }
} catch (error) {
  console.error('Ошибка при получении задачи:', error);
  errorMessage = 'Ошибка при получении задачи';
  Astro.response.status = 500;
}

const createdDate = task ? task.createdAt.toISOString() : '';
const updatedDate = task ? task.updatedAt.toISOString() : '';

const metaDescription = task 
  ? `Задача "${task.title}" с приоритетом ${task.priority}. ${task.description.substring(0, 150)}${task.description.length > 150 ? '...' : ''}`
  : 'Информация о задаче не найдена';

const dummyFunc = () => {};

const jsonLd = task ? {
  "@context": "https://schema.org",
  "@type": "TodoItem",
  "name": task.title,
  "description": task.description,
  "dateCreated": task.createdAt.toISOString(),
  "dateModified": task.updatedAt.toISOString(),
  "actionStatus": task.completed ? "CompletedActionStatus" : "ActiveActionStatus",
  "scheduledTime": task.dueDate.toISOString(),
  "priority": task.priority,
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": new URL(`/tasks/${id}`, Astro.site).toString()
  }
} : null;

const shareText = task ? `Задача: ${task.title} - Приоритет: ${task.priority}, Срок: ${new Date(task.dueDate).toLocaleDateString('ru-RU')}` : '';

const taskStatusText = task ? (task.completed ? 'Завершено' : 'В процессе') : '';

function getPriorityColor(priority: string): string {
  switch (priority) {
    case 'high': return 'red';
    case 'medium': return 'yellow';
    case 'low': return 'green';
    default: return 'blue';
  }
}

const ogImage = task 
  ? `/api/og?title=${encodeURIComponent(task.title)}&priority=${task.priority}&color=${getPriorityColor(task.priority)}&status=${encodeURIComponent(taskStatusText)}`
  : "/task-manager-preview.png";
---

<Layout 
  title={task ? `Задача: ${task.title}` : 'Задача не найдена'} 
  description={metaDescription}
  canonicalURL={new URL(`/tasks/${id}`, Astro.site)}
  type="article"
  publishedTime={createdDate}
  modifiedTime={updatedDate}
  image={ogImage}
>
  <div class="max-w-4xl mx-auto py-8">
    <nav class="mb-6" aria-label="Хлебные крошки">
      <ol class="flex space-x-2 text-sm">
        <li>
          <a href="/" class="text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300">
            Главная
          </a>
        </li>
      </ol>
    </nav>
    
    <PageTransition client:load>
      {errorMessage && (
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 dark:bg-red-900 dark:text-red-100 dark:border-red-700" role="alert">
          <p>{errorMessage}</p>
          <a href="/" class="inline-block mt-4 px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors">
            Вернуться на главную
          </a>
        </div>
      )}
      
      {task && (
        <div>
          <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl text-gray-700 dark:text-gray-100 font-bold">{task.title}</h1>
            <ShareButton 
              client:load 
              title={`Задача: ${task.title}`} 
              text={shareText} 
              url={new URL(`/tasks/${id}`, Astro.site).toString()} 
            />
          </div>
          
          <TaskCard 
            task={task} 
            onComplete={dummyFunc} 
            onEdit={dummyFunc} 
            onDelete={dummyFunc} 
            client:load 
          />
          
          <div class="mt-8 flex flex-wrap gap-4">
            <a 
              href="/" 
              class="inline-block px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors"
            >
              Вернуться к списку задач
            </a>
            
            <button 
              id="complete-task-btn"
              class={`inline-block px-4 py-2 rounded transition-colors ${task.completed ? 
                "bg-yellow-600 hover:bg-yellow-700 text-white" : 
                "bg-blue-600 hover:bg-blue-700 text-white"}`}
            >
              {task.completed ? "Возобновить" : "Завершить"}
            </button>
            
            <button 
              id="edit-task-btn"
              class="inline-block px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
            >
              Редактировать
            </button>
            
            <button 
              id="delete-task-btn"
              class="inline-block px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
            >
              Удалить
            </button>
          </div>
        </div>
      )}
    </PageTransition>
  </div>
  <div id="modal-container"></div>
</Layout>

{task && (
  <script type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>
)}

<script define:vars={{ taskId: id, taskCompleted: task?.completed, task: task }}>
  if (typeof window !== 'undefined') {
    const darkMode = localStorage.getItem('darkMode') === 'true';
    if (darkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    
    const completeTaskBtn = document.getElementById('complete-task-btn');
    if (completeTaskBtn) {
      completeTaskBtn.addEventListener('click', async () => {
        try {
          const response = await fetch(`/api/tasks/${taskId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              completed: !taskCompleted,
            }),
          });
          
          const result = await response.json();
          
          if (result.success) {
            window.location.reload();
          } else {
            alert('Ошибка при обновлении статуса задачи: ' + (result.error || 'Неизвестная ошибка'));
          }
        } catch (err) {
          console.error('Ошибка при обновлении задачи:', err);
          alert('Ошибка при обновлении задачи');
        }
      });
    }
    
    const editTaskBtn = document.getElementById('edit-task-btn');
    if (editTaskBtn) {
      editTaskBtn.addEventListener('click', () => {
        const modalContainer = document.getElementById('modal-container');
        if (!modalContainer) return;
        
        const dueDate = new Date(task.dueDate);
        const formattedDate = dueDate.toISOString().split('T')[0];
        
        const editedTask = {
          id: task.id,
          title: task.title,
          description: task.description,
          priority: task.priority,
          dueDate: formattedDate,
          completed: task.completed
        };
        
        modalContainer.innerHTML = `
          <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-lg w-full max-h-90vh overflow-y-auto">
              <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold mb-0">Редактирование задачи</h2>
                <button id="close-modal-btn" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">
                  <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              <form id="edit-task-form" class="space-y-4">
                <div>
                  <label for="edit-title" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Заголовок</label>
                  <input
                    type="text"
                    id="edit-title"
                    name="title"
                    value="${editedTask.title}"
                    required
                    class="mt-1 bg-gray-100 text-gray-800 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  />
                </div>
                
                <div>
                  <label for="edit-description" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Описание</label>
                  <textarea
                    id="edit-description"
                    name="description"
                    required
                    rows="3"
                    class="mt-1 bg-gray-100 text-gray-800 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  >${editedTask.description}</textarea>
                </div>
                
                <div>
                  <label for="edit-priority" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Приоритет</label>
                  <select
                    id="edit-priority"
                    name="priority"
                    required
                    class="mt-1 bg-gray-100 text-gray-800 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  >
                    <option value="low" ${editedTask.priority === 'low' ? 'selected' : ''}>Низкий</option>
                    <option value="medium" ${editedTask.priority === 'medium' ? 'selected' : ''}>Средний</option>
                    <option value="high" ${editedTask.priority === 'high' ? 'selected' : ''}>Высокий</option>
                  </select>
                </div>
                
                <div>
                  <label for="edit-dueDate" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Срок выполнения</label>
                  <input
                    type="date"
                    id="edit-dueDate"
                    name="dueDate"
                    value="${formattedDate}"
                    required
                    class="mt-1 bg-gray-100 text-gray-800 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  />
                </div>
                
                <div class="flex justify-end space-x-3 mt-6">
                  <button
                    type="button"
                    id="cancel-edit-btn"
                    class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
                  >
                    Отмена
                  </button>
                  <button
                    type="submit"
                    class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                  >
                    Сохранить
                  </button>
                </div>
              </form>
            </div>
          </div>
        `;
        
        const closeModalBtn = document.getElementById('close-modal-btn');
        const cancelEditBtn = document.getElementById('cancel-edit-btn');
        const editTaskForm = document.getElementById('edit-task-form');
        
        const closeModal = () => {
          modalContainer.innerHTML = '';
        };
        
        if (closeModalBtn) {
          closeModalBtn.addEventListener('click', closeModal);
        }
        
        if (cancelEditBtn) {
          cancelEditBtn.addEventListener('click', closeModal);
        }
        
        if (editTaskForm) {
          editTaskForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            
            const formData = new FormData(editTaskForm);
            const updatedTask = {
              title: formData.get('title'),
              description: formData.get('description'),
              priority: formData.get('priority'),
              dueDate: formData.get('dueDate'),
              completed: task.completed
            };
            
            try {
              const response = await fetch(`/api/tasks/${taskId}`, {
                method: 'PUT',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(updatedTask),
              });
              
              const result = await response.json();
              
              if (result.success) {
                window.location.reload();
              } else {
                alert('Ошибка при обновлении задачи: ' + (result.error || 'Неизвестная ошибка'));
              }
            } catch (err) {
              console.error('Ошибка при обновлении задачи:', err);
              alert('Ошибка при обновлении задачи');
            }
          });
        }
      });
    }
    
    const deleteTaskBtn = document.getElementById('delete-task-btn');
    if (deleteTaskBtn) {
      deleteTaskBtn.addEventListener('click', async () => {
        if (confirm('Вы уверены, что хотите удалить эту задачу?')) {
          try {
            const response = await fetch(`/api/tasks/${taskId}`, {
              method: 'DELETE',
            });
            
            const result = await response.json();
            
            if (result.success) {
              window.location.href = '/';
            } else {
              alert('Ошибка при удалении задачи: ' + (result.error || 'Неизвестная ошибка'));
            }
          } catch (err) {
            console.error('Ошибка при удалении задачи:', err);
            alert('Ошибка при удалении задачи');
          }
        }
      });
    }
  }
</script> 